{"name":"Fidoo","tagline":"Format Identification of Digital Objects Online","body":"Fidoo\r\n=====\r\n\r\nFormat Identification of Digital Objects Online\r\n-----\r\n\r\nA javascript library to determine the file-type and version of a file.\r\n\r\nFidoo can be used to check file-types before uploading or as a node.js app to analyse files on a file-system.\r\n\r\nFidoo uses a trimmed down and modified  [FIDO](https://github.com/openpreserve/fido/) signature version of [PRONOM](http://www.nationalarchives.gov.uk/pronom/) signature files.\r\n\r\nDemo: <http://www.techmaurice.com/fidoo/>\r\n\r\n### Fidoo is a file format identification library\r\nAlthough the example node.js app and web app that go with the library work as expected, Fidoo is not a turn-key app but a file format identification library written in Javascript. Fidoo supports implementation in both node.js and webbased HTML5 applications. \r\n\r\nFidoo only has one function, that is to identify the format of files and offers no support to read or write files, except reading its own configuration and signature-files. It is up to you how you supply the binary content of files to Fidoo to analyse the format and what to do with the results. \r\n\r\nThis makes Fidoo a \"real\" Javascript library you can use in your own projects. Some examples: to check the filetype of files before uploading to a website or offline as part of a server workflow. \r\n\r\n### Synchronous execution\r\nFidoo is executed synchronous. You supply a binary string and get a Javascript object back as resultset. Please note that execution in a browser will be asynchronous due to the way browsers read files from the local filesystem.\r\n\r\nIn node.js you can use both synchronous and asynchronous functions to read files, although asynchronous reading is recommended as it prevents application blocking and yields better performance due to the internal workings of node.js. The downside of asynchronous reading is you have to keep track of results using events and/or callbacks instead of waiting for them synchronously.\r\n\r\n### Fidoo functions\r\nIf you load `fidoo-core.js`, Fidoo is ready for use, after loading its configuration and signature files automatically.\r\n\r\nAlthough Fidoo contains multiple functions, there is only one you should use:\r\n\r\n`Fidoo.identifyFile(**binarystream** [[, **matchingMethod** (strict/relaxed)] [, **disablePriority** (true/false)] [, **filename**] [, **mimetype]])` \r\nwhich returns a Javascript object. \r\n\r\nArguments matchingMethod and disablePriority are optional and default to what is configured. \r\nIf matchingMethod is \"strict\", matching PUIDs are only returned when _all_ matches are satisfied for that particular signature (eg. BOF or BOF + EOF or VAR or BOF + VAR or BOF +  VAR + EOF, or a variation thereof).\r\nIf matchingMethod is \"relaxed\", matching PUIDs are returned if only BOF matches.\r\n\r\nArguments filename and mimetype are optional, but if these are supplied you will get a richer resultset returned with information about the file extension and mimetype.\r\n\r\n#### Runtime options\r\nBefore each call to `Fidoo.identifyFile` you can change configuration, for example to first perform \"strict\" identification of a file and successively a \"relaxed\" identification. Also you can enable or disable \"priority override\" at will, or one or both while calling `Fidoo.identifyFile`.\r\n\r\n#### Resultset\r\nFidoo returns a resultset depending on configuration, and if you supplied the filename and/or mimetype. Because the resultset is a Javascript object, you can easily modify or enhance it, save it as a JSON file or insert it into a JSON database.\r\n\r\nTwo main object arrays are passed back in the resultset: \"result\", \"warning\" and \"error\".\r\n\r\nPossible errors:\r\n`Fidoo.identifyFile expects at least one argument: binaryString (type: string)`\r\nThis happens when you call Fidoo.identifyFile without arguments\r\n\r\n`Fidoo.identifyFile expects binaryString to be a string, not an object`\r\nThis happens when you pass an object instead of a string.\r\n\r\n`Fidoo.identifyFile expects binaryString to be a string`\r\nThis happens when you pass \"something\" else (eg. null, false) instead of a string.\r\n\r\nPossible warnings:\r\n`empty binaryString`\r\nThis happens when the string is empty (ie. maybe an empty file).\r\n\r\n### Example app: usage\r\nThe Fidoo example app `fidoo.js` expects a plain text file with filenames (e.g. /path/to/file.txt) with one file per line and outputs a json file with results.\r\n\r\n`node fidoo.js -input=~/fidoo_files.txt -output=~/fidoo_output.json`\r\n\r\nUse quotes around filenames with spaces, like this:\r\n`node fidoo.js -input=~/fidoo_files.txt -output=\"~/fidoo output.json\"`\r\n\r\nPlease note that all \"logic\" for reading and writing files is done in `fidoo.js` and not in the library `fidoo-core.js`. If you want to extend or change the app, please only do so in `fidoo.js`. It would be cool if you commit any offspring to the Fidoo repository on GitHub, so it can be incorporated as example. Give it a unique name (e.g. `fidoo-yourname.js` and push it to the main branch of Fidoo. Don't forget your documentation ;)\r\n\r\n### Fidoo global object variables and arrays\r\nCan be altered directly in the library, via fidoo-setup.js or during runtime by changing the variables, for example: `fidoo.debug = false;`.\r\nFor all changes goes: *Danger, Will Robinson*! \r\n\r\nIt is therefore recommended to ONLY alter the variables available in fidoo-setup.js. This setup file is loaded before any action is performed, but after the initial variables are loaded in the library. If the setup file is missing, this is silently ignored. This gives the advantage Fidoo will always run, but for node.js it also implies you can use different  settings with a single installation by rewriting or deleting the setup file.\r\n\r\n\t\tcheckJSON: [],\r\n\t\tchunkSize: 4096, // raw bytes\r\n\t\tdebug: true,\r\n\t\textensionPuidMap: {},\r\n\t\textensionPuidMapJSON: \"extensionPuidMap-v84-0.json\",\r\n\t\tfidooSignatureFixesJSON: \"fidooSignatureFixes-v84-0.json\",\r\n\t\tlibVersion: \"0.0.2\",\r\n\t\tmatchingMethod: \"strict\",\r\n\t\tmimePuidMap: {},\r\n\t\tmimePuidMapJSON: \"mimePuidMap-v84-0.json\",\r\n\t\tnodeJSONUri: \"../json/\",\r\n\t\tdisablePriority: false,\r\n\t\tpronomSignatures: {},\r\n\t\tpronomSignaturesJSON: \"pronomSignatures-v84-0.json\",\r\n\t\tpronomSignatureVersion: 84,\r\n\t\trawGitUrl: \"https://cdn.rawgit.com/techmaurice/fidoo/master/json/\",\r\n\t\tregexesMap: {},\r\n\t\trunningNodeJS: typeof process !== \"undefined\",\r\n\t\tsignaturesLoaded: false,\r\n\r\n### Fidoo Object functions\r\n\r\n#### Browser\r\nTBA\r\n\r\n#### node.js\r\nTBA\r\n\r\n### File Format Signature Data Objects\r\nObjects in memory you can use in your own browser or node app:\r\n\r\nOBJECT.pronomSignatures: \r\n\r\nAn array of PRONOM signatures, a trimmed down and modified version of the signatures generated by the original FIDO Python app of the Open Preservation Foundation. The original PRONOM signatures are provided by TNA UK. \r\n\r\nSignature updates are pushed to GitHub if there is a new version. Either update your fidoo git or download them manually.\r\nConverting signatures: consult the higly experimental (buggy sometimes) scripts in  \"debug/\". Meant to be run in a browser. You are on your own there.\r\n\r\nOBJECT.extensionPuidMap: \r\nAn array of extensions to PUIDS, e.g. ['x-fmt/230': ['audio/midi', 'x/x']]\r\n\r\nOBJECT.extensionPuidMap: \r\nAn array of PUIDS to extensions, e.g. ['audio/midi': ['x-fmt/230','fmt/x']]\r\n\r\n#### Examples \r\nbrowser: \r\n```javascript\r\nconsole.dir(Fidoo.pronomSignatures); \r\nconsole.dir(Fidoo.extensionPuidMap); \r\nconsole.dir(Fidoo.mimePuidMapJSON); \r\n```\r\n\r\n node.js: \r\n```javascript\r\nvar fidoo = module.Fidoo; \r\nfidoo.dumpObject(fidoo.pronomSignatures); \r\nfidoo.dumpObject(fidoo.extensionPuidMap); \r\nfidoo.dumpObject(fidoo.mimePuidMap); \r\n```\r\n\r\n### License\r\nApache 2.0, see LICENSE.txt for more information\r\n\r\n### Need help implementing Fidoo into your project?\r\nDrop an email and we can work something out.\r\n  \r\n### Notes\r\nAlthough you are free to use Fidoo in your own projects, I would very much appreciate to get credited.\r\n\r\nIf you use Fidoo in your workflow and/or think it is useful, consider making a donation through PayPal <https://www.paypal.me/techmaurice>. Any amount is welcome and helps the development of Fidoo.\r\n\r\nIf you have any questions, suggestions or a code fix, please submit these to Github <https://github.com/techmaurice/fidoo/>.\r\n\r\n<hr />\r\nTechMaurice 2016","google":"UA-56340898-1","note":"Don't delete this file! It's used internally to help with page regeneration."}